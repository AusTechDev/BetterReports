/*
 * BetterReports - build.gradle
 *
 * Github: https://github.com/AusTechDev/
 * Spigot Profile: https://www.spigotmc.org/members/_timmyy_.919057/
 * Discord Server: https://discord.austech.dev/
 *
 * MIT License
 *
 * Copyright (c) 2020 Timmy109.
 * Copyright (c) 2020 Contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import org.apache.tools.ant.filters.ReplaceTokens
import org.eclipse.jgit.lib.Ref
import org.eclipse.jgit.lib.Repository
import org.eclipse.jgit.revwalk.RevWalk

plugins {
    id 'java'
    id 'org.ajoberstar.grgit' version '4.1.0'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id "io.freefair.lombok" version "6.0.0-m2"
    id 'net.kyori.indra' version "2.0.4" apply false
    id 'net.kyori.indra.git' version "2.0.4"
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.12-R0.1-SNAPSHOT'
}

group = 'dev.austech'
version = '1.2.4'
description = 'BetterReports'
java.sourceCompatibility = JavaVersion.VERSION_1_8

// https://github.com/EssentialsX/Essentials/blob/2.x/build.gradle
@SuppressWarnings('GrMethodMayBeStatic')
def commitsSinceLastTag() {
    if (indraGit == null || !indraGit.isPresent() || indraGit.tags().isEmpty()) {
        return -1
    }
    def tags = indraGit.tags()
    def depth = 0
    def walk = new RevWalk(indraGit.git().getRepository())
    def commit = walk.parseCommit(indraGit.commit())
    while (true) {
        for (tag in tags) {
            if (walk.parseCommit(tag.getLeaf().getObjectId()) == commit) {
                walk.dispose()
                indraGit.git().close()
                return depth
            }
        }
        depth++
        commit = walk.parseCommit(commit.getParents()[0])
    }
}

@SuppressWarnings('GrMethodMayBeStatic')
def headBranchName() {
    if (System.getenv("GITHUB_HEAD_REF") != null && !System.getenv("GITHUB_HEAD_REF").isEmpty()) {
        return System.getenv("GITHUB_HEAD_REF")
    } else if (System.getenv("GITHUB_REF") != null && !System.getenv("GITHUB_REF").isEmpty()) {
        return System.getenv("GITHUB_REF").replaceFirst("refs/heads/", "")
    }

    if (!indraGit.isPresent()) {
        return "detached-head"
    }

    Ref ref = indraGit.git().getRepository().exactRef('HEAD')?.target
    if (ref == null) {
        return "detached-head"
    }

    return Repository.shortenRefName(ref.name)
}

ext {
    GIT_COMMIT = !indraGit.isPresent() ? "unknown" : indraGit.commit().abbreviate(7).name()
    GIT_DEPTH = commitsSinceLastTag()
    GIT_BRANCH = headBranchName()

    fullVersion = "${version}".replace("-SNAPSHOT", "-dev+${GIT_DEPTH}-${GIT_COMMIT}")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

processResources {
    inputs.property('fullVersion', fullVersion)
    filter ReplaceTokens, tokens: [
            "version": fullVersion
    ]
}

task copyJars(type: Copy) {
    outputTasks().forEach({ from(it) })
    rename '(.*)-all.jar', ('$1' + '.jar')
    rename project.name + "-" + project.version + ".jar", project.name + "-" + project.fullVersion + ".jar"
    into file('jars')
}

def outputTasks() {
    ["shadowJar"].stream().map({ tasks.findByPath(it) })
}

task cleanJars() {
    delete file('jars')
}

clean.dependsOn cleanJars
build.dependsOn shadowJar
build.dependsOn copyJars
